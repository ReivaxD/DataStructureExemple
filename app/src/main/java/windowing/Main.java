/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package windowing;

import java.util.ArrayList;

import arbre.PrioritySearchTree;
import arbre.Segment;
import arbre.listSegment;
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.VBox;
//import javafx.scene.text.Text;
import javafx.stage.Stage;
import javafx.scene.canvas.*;
import javafx.scene.canvas.GraphicsContext;

//import windowing.Drawing;
public class Main extends Application{

    //window width & height
    private int width = 1000;
    private int height = 750;
    private int borderWidth = 200;
    private double lineWidth = 1.0;

    //Canvas width & height
    private double ValX1 = 50;
    private double ValX2 = 60;
    private double ValY1 = 0;
    private double ValY2 = 75;
    private double intervalX = 25;
    private double intervalY = 40;

    //affichage du grillage
    private boolean grillage = false;

    //Button list
    private Button exit;
    private Button load;
    private TextField loadText;

    private Label setValX1;
    private Label setValX2;
    private Label setIntervalX;
    private TextField textValX1;
    private TextField textValX2;
    private TextField textIntervalX;

    private Label setValY1;
    private Label setValY2;
    private Label setIntervalY;
    private TextField textValY1;
    private TextField textValY2;
    private TextField textIntervalY;

    private CheckBox cb;

    private Button confirm;

    private GraphicsContext gc;
    private Canvas canvas;

    private GraphicsContext notifGC;
    private Canvas notifCV;

    private Notification notification;

    private listSegment seg = new listSegment(new ArrayList<>() , new ArrayList<>());

    private PrioritySearchTree treeH;
    private PrioritySearchTree treeV;
    public static void main(String[] args) {
        launch(args);
    }

    public void start(Stage stage) {

        //Main Window
        BorderPane primaryRoot = new BorderPane();
        primaryRoot.setMaxHeight(height);
        primaryRoot.setMaxWidth(width + borderWidth);
        //Segment window
        canvas = new Canvas(width,height);
        gc = canvas.getGraphicsContext2D();

        //Draw the lines of the grid
        Drawing.drawCanvas(gc, width, height, ValX1, ValX2, ValY1, ValY2, intervalX, intervalY, seg, grillage);
        
        primaryRoot.setRight(canvas);

        VBox buttonBox = new VBox();

        //Exit button
        exit = new Button("Exit");
        exit.setOnAction(evt -> stage.close());

        //Loading button (for segment list loading) + textfield
        load = new Button("Load segment file : ");
        load.setOnAction(evt -> setSegment(stage, loadText.getText()));                   
        loadText = new TextField();

        //Window button (for accurate window) + textfield
        setValX1 = new Label("Valeur X1 :");
        setValX2 = new Label("Valeur X2 :");
        setIntervalX = new Label("Interval X : ");
        textValX1 = new TextField();
        textValX2 = new TextField();
        textIntervalX = new TextField();

        setValY1 = new Label("Valeur Y1 :");
        setValY2 = new Label("Valeur Y2 :");
        setIntervalY = new Label("Interval Y : ");
        textValY1 = new TextField();
        textValY2 = new TextField();
        textIntervalY = new TextField();

        confirm = new Button("Confirmer choix");
        confirm.setOnAction(evt -> confirm(stage));

        cb = new CheckBox("Afficher grillage ?");
        cb.setSelected(grillage);
        cb.setOnAction(evt -> setGril(stage, cb.isSelected()));

        //ajout de plein de bouttons
        buttonBox.getChildren().addAll(load);
        buttonBox.getChildren().addAll(loadText, new Label("Exemple :  \"fichier.txt\""));
        buttonBox.getChildren().addAll(cb);
        buttonBox.getChildren().addAll(new Label("Exemple de valeur X ou Y : "), new Label("Pour fenetre correcte X1 < X2 et Y1 < Y2"), new Label("\"-1000\",  \"+42\",  \"0\",  \"20\""),new Label(""), new Label("Exemple d'intervalle en X ou Y : "),new Label("Doit etre comprise entre "),new Label("10 et 30 compris (pour lisibilite)"), new Label("\"10\", \"23\", \"30\""), setValX1, textValX1, setValX2,  textValX2, setIntervalX, textIntervalX);
        buttonBox.getChildren().addAll(setValY1,textValY1, setValY2,  textValY2, setIntervalY, textIntervalY);
        buttonBox.getChildren().addAll(confirm);

        //notifications
        notification = Notification.Instance();
        notifCV = new Canvas(201,201);
        notifGC = notifCV.getGraphicsContext2D();
        Notification.drawNotif(notifGC);
        buttonBox.getChildren().addAll(notifCV);

        buttonBox.getChildren().addAll(exit);

        primaryRoot.setLeft(buttonBox);
        //Configure et affiche l'application
        Scene scene = new Scene(primaryRoot,width + borderWidth,height);
        double maxHeight = height+ (lineWidth*height/50) + 20;
        double maxWidth = borderWidth+width+(lineWidth*width/50);
        stage.setMaxHeight(maxHeight);
        stage.setMinHeight(maxHeight);
        stage.setMaxWidth(maxWidth);
        stage.setMinWidth(maxWidth);
        stage.setScene(scene);
        stage.setTitle("Windowing app");
        stage.show();
    }

    /**
     * Methode de verification des entrees.
     * Verifie premierement si le format entre est correcte (via checkNum et isEmpty)
     * Verifie ensuite si la donnee entree est utilisable (pas de fenetre/intervalle de taille negative (i.g. X1 < X2 ))
     * @param stage Le stage utilise pour l'affichage
     */
    private void confirm(Stage stage) {
        if(!textValX1.getText().trim().isEmpty())
            if(Check.checkNum(textValX1.getText()))
                if(Check.checkX1(textValX1.getText(), ValX2))
                    ValX1 = Double.parseDouble(textValX1.getText());
        if(!textValX2.getText().trim().isEmpty())
            if(Check.checkNum(textValX2.getText()))
                if(Check.checkX2(textValX2.getText(), ValX1))
                    ValX2 = Double.parseDouble(textValX2.getText());
        if(!textIntervalX.getText().trim().isEmpty())
            if(Check.checkNum(textIntervalX.getText()))
                if(Check.checkInterval(textIntervalX.getText()))
                    intervalX = Double.parseDouble(textIntervalX.getText());
        if(!textValY1.getText().trim().isEmpty())
            if(Check.checkNum(textValY1.getText()))
                if(Check.checkY1(textValY1.getText(), ValY2))
                    ValY1 = Double.parseDouble(textValY1.getText());
        if(!textValY2.getText().trim().isEmpty())
            if(Check.checkNum(textValY2.getText()))    
                if(Check.checkY2(textValY2.getText(), ValY1))
                    ValY2 = Double.parseDouble(textValY2.getText());
        if(!textIntervalY.getText().trim().isEmpty())
            if(Check.checkNum(textIntervalY.getText())) 
                if(Check.checkInterval(textIntervalY.getText()))   
                    intervalY = Double.parseDouble(textIntervalY.getText());
        gc.clearRect(0, 0, canvas.getWidth(), canvas.getHeight()); 
        start(stage);
    }

    private void setGril(Stage stage, boolean val){
        grillage = val;
        start(stage);
    }

    private void setSegment(Stage stage, String mot){
        seg = Load.extract(mot);
        this.treeH=new PrioritySearchTree(seg.getHori());
        this.treeV=new PrioritySearchTree(seg.getVerti());
        start(stage);
    }
}
